{
  "name": "VAPI Interview Processing with Type Filter",
  "nodes": [
    {
      "parameters": {
        "path": "vapi-call-completed",
        "httpMethod": "POST",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false,
          "allowedOrigins": "*"
        }
      },
      "id": "webhook-vapi-events",
      "name": "VAPI Events Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "vapi-call-completed"
    },
    {
      "parameters": {
        "functionCode": "// Log incoming VAPI event for debugging\nconst inputData = $input.all()[0].json;\n\nconsole.log('VAPI Event Received:', JSON.stringify(inputData, null, 2));\nconsole.log('Event Type:', inputData.type);\nconsole.log('Event Message:', inputData.message);\n\n// Pass through the data unchanged for now\nreturn [{ json: inputData }];"
      },
      "id": "debug-vapi-event",
      "name": "Debug VAPI Event",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "transcript-filter-condition",
              "leftValue": "={{ $json.type }}",
              "rightValue": "transcript",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-transcript-events",
      "name": "Filter: Transcript Events Only",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract and structure transcript data from VAPI event\nconst inputData = $input.all()[0].json;\n\nconsole.log('Processing transcript event:', inputData);\n\n// Extract call and transcript information\nconst callData = {\n  // Event data\n  eventType: inputData.type,\n  messageType: inputData.message?.type,\n  \n  // Call information\n  callId: inputData.message?.call?.id || inputData.call?.id,\n  candidateName: inputData.message?.call?.metadata?.candidateName || \n                inputData.call?.metadata?.candidateName || \n                inputData.metadata?.candidateName || 'Unknown Candidate',\n  sessionId: inputData.message?.call?.metadata?.sessionId || \n            inputData.call?.metadata?.sessionId || \n            inputData.metadata?.sessionId,\n  \n  // Transcript specific data\n  transcript: inputData.message?.transcript || \n             inputData.transcript || \n             inputData.message?.call?.transcript || \n             inputData.call?.transcript || '',\n  \n  // Timing information\n  duration: inputData.message?.call?.endedAt && inputData.message?.call?.startedAt ? \n    new Date(inputData.message.call.endedAt).getTime() - new Date(inputData.message.call.startedAt).getTime() : 0,\n  startTime: inputData.message?.call?.startedAt || inputData.call?.startedAt,\n  endTime: inputData.message?.call?.endedAt || inputData.call?.endedAt,\n  \n  // Additional call details\n  callStatus: inputData.message?.call?.status || inputData.call?.status || 'unknown',\n  phoneNumber: inputData.message?.call?.phoneNumber || inputData.call?.phoneNumber,\n  cost: inputData.message?.call?.cost || inputData.call?.cost || 0,\n  recordingUrl: inputData.message?.call?.recordingUrl || inputData.call?.recordingUrl,\n  summary: inputData.message?.call?.summary || inputData.call?.summary,\n  \n  // Keep raw data for debugging\n  rawEventData: inputData,\n  processedAt: new Date().toISOString()\n};\n\n// Validation\nif (!callData.transcript) {\n  console.warn('No transcript found in VAPI event data');\n  // Don't throw error, just log warning as transcript might be empty for short calls\n}\n\nif (!callData.candidateName || callData.candidateName === 'Unknown Candidate') {\n  console.warn('Candidate name not found in metadata');\n}\n\nif (!callData.callId) {\n  console.warn('Call ID not found in VAPI event');\n}\n\nconsole.log('Extracted call data:', callData);\n\nreturn [{ json: { callData } }];"
      },
      "id": "extract-transcript-data",
      "name": "Extract Transcript Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-transcript-condition",
              "leftValue": "={{ $node['Extract Transcript Data'].json.callData.transcript }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-has-transcript",
      "name": "Filter: Has Transcript Content",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4"
            },
            {
              "name": "messages",
              "value": "=[{\n  \"role\": \"system\",\n  \"content\": \"You are an expert interview analyst for Bloom Buddies. Analyze phone interview transcripts and provide comprehensive evaluations. Return your response as valid JSON only, no additional text.\"\n}, {\n  \"role\": \"user\",\n  \"content\": \"Analyze this interview transcript for candidate: {{ $node['Extract Transcript Data'].json.callData.candidateName }}\\n\\nTranscript: {{ $node['Extract Transcript Data'].json.callData.transcript }}\\n\\nDuration: {{ Math.round($node['Extract Transcript Data'].json.callData.duration / 60000) }} minutes\\n\\nPlease analyze and return ONLY a JSON object with these exact fields:\\n{\\n  \\\"overallScore\\\": number (1-10),\\n  \\\"communicationSkillsScore\\\": number (1-10),\\n  \\\"enthusiasmScore\\\": number (1-10),\\n  \\\"professionalismScore\\\": number (1-10),\\n  \\\"keyStrengths\\\": [\\\"strength1\\\", \\\"strength2\\\"],\\n  \\\"areasForImprovement\\\": [\\\"area1\\\", \\\"area2\\\"],\\n  \\\"executiveSummary\\\": \\\"2-3 sentence summary\\\",\\n  \\\"recommendation\\\": \\\"Hire|Interview Further|Pass\\\",\\n  \\\"detailedFeedback\\\": \\\"detailed analysis\\\",\\n  \\\"redFlags\\\": [\\\"any concerning behaviors\\\"],\\n  \\\"standoutMoments\\\": [\\\"impressive responses or behaviors\\\"]\\n}\"\n}]"
            },
            {
              "name": "temperature",
              "value": 0.3
            },
            {
              "name": "max_tokens",
              "value": 1500
            }
          ]
        },
        "options": {}
      },
      "id": "ai-analysis-transcript",
      "name": "AI Analysis of Transcript",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\\n  \\\"status\\\": \\\"success\\\",\\n  \\\"message\\\": \\\"Transcript processed successfully\\\",\\n  \\\"eventType\\\": \\\"{{ $node['Extract Transcript Data'].json.callData.eventType }}\\\",\\n  \\\"callId\\\": \\\"{{ $node['Extract Transcript Data'].json.callData.callId }}\\\",\\n  \\\"candidateName\\\": \\\"{{ $node['Extract Transcript Data'].json.callData.candidateName }}\\\",\\n  \\\"transcriptLength\\\": {{ $node['Extract Transcript Data'].json.callData.transcript.length }},\\n  \\\"processedAt\\\": \\\"{{ $node['Extract Transcript Data'].json.callData.processedAt }}\\\"\\n}",
        "options": {}
      },
      "id": "respond-success",
      "name": "Respond Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\\n  \\\"status\\\": \\\"ignored\\\",\\n  \\\"message\\\": \\\"Event type not transcript\\\",\\n  \\\"eventType\\\": \\\"{{ $json.type }}\\\",\\n  \\\"receivedAt\\\": \\\"{{ new Date().toISOString() }}\\\"\\n}",
        "options": {}
      },
      "id": "respond-ignored",
      "name": "Respond Ignored",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        680,
        500
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "VAPI Events Webhook": {
      "main": [
        [
          {
            "node": "Debug VAPI Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug VAPI Event": {
      "main": [
        [
          {
            "node": "Filter: Transcript Events Only",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter: Transcript Events Only": {
      "main": [
        [
          {
            "node": "Extract Transcript Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Ignored",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Transcript Data": {
      "main": [
        [
          {
            "node": "Filter: Has Transcript Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter: Has Transcript Content": {
      "main": [
        [
          {
            "node": "AI Analysis of Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analysis of Transcript": {
      "main": [
        [
          {
            "node": "Respond Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "00000000-0000-0000-0000-000000000000",
  "id": "00000000-0000-0000-0000-000000000000",
  "meta": {
    "instanceId": "00000000-0000-0000-0000-000000000000"
  },
  "tags": []
}