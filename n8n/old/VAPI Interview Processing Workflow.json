{
  "name": "VAPI Interview Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "vapi-call-completed",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*",
          "rawBody": false
        }
      },
      "id": "65fdf1fa-5350-460a-b482-bbb9fb8b9112",
      "name": "VAPI Call Completed Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1104,
        80
      ],
      "webhookId": "vapi-call-completed"
    },
    {
      "parameters": {
        "functionCode": "// Enhanced Debug: Log everything VAPI sends us\nconst inputData = $input.all()[0].json;\n\nconsole.log('=== VAPI WEBHOOK DATA RECEIVED ===');\nconsole.log('Full payload:', JSON.stringify(inputData, null, 2));\nconsole.log('Event type:', inputData.type);\nconsole.log('Message type:', inputData.message?.type);\nconsole.log('Call ID:', inputData.call?.id || inputData.message?.call?.id);\n\n// Check all possible transcript locations\nconsole.log('Direct transcript:', inputData.transcript);\nconsole.log('Message transcript:', inputData.message?.transcript);\nconsole.log('Call transcript:', inputData.call?.transcript);\nconsole.log('Message call transcript:', inputData.message?.call?.transcript);\n\n// Check for conversation messages\nif (inputData.messages) {\n  console.log('Conversation messages found:', inputData.messages.length);\n  console.log('Messages:', JSON.stringify(inputData.messages, null, 2));\n}\nif (inputData.call?.messages) {\n  console.log('Call messages found:', inputData.call.messages.length);\n  console.log('Call messages:', JSON.stringify(inputData.call.messages, null, 2));\n}\nif (inputData.message?.call?.messages) {\n  console.log('Message call messages found:', inputData.message.call.messages.length);\n  console.log('Message call messages:', JSON.stringify(inputData.message.call.messages, null, 2));\n}\n\n// Check for analysis/summary\nif (inputData.analysis || inputData.call?.analysis || inputData.message?.call?.analysis) {\n  console.log('Analysis found:', inputData.analysis || inputData.call?.analysis || inputData.message?.call?.analysis);\n}\n\nconsole.log('Metadata:', inputData.metadata || inputData.call?.metadata || inputData.message?.call?.metadata);\nconsole.log('=====================================');\n\n// Pass through unchanged\nreturn [{ json: inputData }];"
      },
      "id": "a9d3b89c-a34f-4929-8cb0-0786c842e213",
      "name": "Debug VAPI Webhook Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -880,
        80
      ]
    },
    {
      "parameters": {
        "functionCode": "// Enhanced VAPI Data Extraction for Interview Processing\nconst inputData = $input.all()[0].json;\n\nconsole.log('=== PROCESSING VAPI END-OF-CALL-REPORT ===');\nconsole.log('Message type:', inputData.message?.type);\nconsole.log('Call ID:', inputData.message?.call?.id);\n\n// Extract the main message data\nconst message = inputData.message;\nconst call = message?.call;\nconst analysis = message?.analysis;\nconst artifact = message?.artifact;\n\n// Extract transcript from multiple possible locations\nlet transcript = '';\nif (message?.transcript) {\n  transcript = message.transcript;\n  console.log('📝 Found transcript in message.transcript');\n} else if (artifact?.transcript) {\n  transcript = artifact.transcript;\n  console.log('📝 Found transcript in artifact.transcript');\n} else if (call?.transcript) {\n  transcript = call.transcript;\n  console.log('📝 Found transcript in call.transcript');\n} else {\n  // Build transcript from messages if no direct transcript\n  const messages = artifact?.messages || message?.messages || [];\n  if (messages.length > 0) {\n    transcript = messages\n      .filter(msg => msg.role === 'bot' || msg.role === 'user' || msg.role === 'assistant')\n      .map(msg => {\n        const role = msg.role === 'bot' ? 'AI' : (msg.role === 'assistant' ? 'AI' : 'User');\n        return `${role}: ${msg.message}`;\n      })\n      .join('\\n');\n    console.log('📝 Built transcript from messages array');\n  }\n}\n\n// Extract summary\nconst summary = analysis?.summary || message?.summary || call?.summary || 'No summary available';\n\n// Extract call statistics\nconst callStats = {\n  callId: call?.id || message?.call?.id || 'unknown',\n  duration: {\n    milliseconds: message?.durationMs || 0,\n    seconds: message?.durationSeconds || 0,\n    minutes: message?.durationMinutes || 0\n  },\n  startedAt: message?.startedAt || call?.startedAt,\n  endedAt: message?.endedAt || call?.endedAt,\n  endedReason: message?.endedReason || 'unknown',\n  totalCost: message?.cost || 0,\n  costBreakdown: message?.costBreakdown || {},\n  recordingUrl: message?.recordingUrl || artifact?.recordingUrl,\n  stereoRecordingUrl: message?.stereoRecordingUrl || artifact?.stereoRecordingUrl\n};\n\n// Extract candidate information\nconst candidateName = \n  call?.metadata?.candidateName || \n  message?.assistant?.variableValues?.candidateName ||\n  message?.assistant?.variableValues?.name ||\n  'Unknown Candidate';\n\nconst sessionId = \n  call?.metadata?.sessionId || \n  message?.assistant?.variableValues?.sessionId ||\n  'unknown';\n\n// Extract session token for Airtable lookup\nconst sessionToken = \n  call?.metadata?.sessionToken || \n  message?.assistant?.variableValues?.sessionToken ||\n  message?.assistant?.metadata?.sessionToken ||\n  call?.metadata?.sessionId || // fallback to sessionId\n  message?.assistant?.variableValues?.sessionId ||\n  null;\n\nconsole.log('🔖 Session Token extracted:', sessionToken);\nconsole.log('👤 Candidate Name extracted:', candidateName);\n\n// Structure all extracted data\nconst extractedData = {\n  eventType: message?.type || 'unknown',\n  timestamp: message?.timestamp || Date.now(),\n  \n  candidate: {\n    name: candidateName,\n    sessionId: sessionId,\n    sessionToken: sessionToken  // Add for Airtable lookup\n  },\n  \n  transcript: {\n    full: transcript,\n    length: transcript.length,\n    hasContent: transcript.length > 0\n  },\n  \n  analysis: {\n    summary: summary,\n    successEvaluation: analysis?.successEvaluation || 'unknown'\n  },\n  \n  callStats: callStats,\n  \n  conversation: {\n    messages: artifact?.messages || [],\n    totalMessages: (artifact?.messages || []).length\n  },\n  \n  processing: {\n    extractedAt: new Date().toISOString(),\n    hasTranscript: transcript.length > 0,\n    hasSummary: summary !== 'No summary available'\n  }\n};\n\nconsole.log('📊 EXTRACTION SUMMARY:');\nconsole.log(`- Candidate: ${extractedData.candidate.name}`);\nconsole.log(`- Transcript length: ${extractedData.transcript.length} characters`);\nconsole.log(`- Call duration: ${extractedData.callStats.duration.minutes} minutes`);\nconsole.log(`- Total cost: $${extractedData.callStats.totalCost}`);\nconsole.log(`- Success evaluation: ${extractedData.analysis.successEvaluation}`);\nconsole.log('=== EXTRACTION COMPLETE ===');\n\nreturn [{ json: { extractedData } }];"
      },
      "id": "8f874ef0-4c4e-4f2e-9e27-70ebb3e3ab5e",
      "name": "Extract Call Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -656,
        80
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4"
            },
            {
              "name": "messages",
              "value": "=[{\n  \"role\": \"system\",\n  \"content\": \"You are an expert interview analyst for Bloom Buddies. Analyze phone interview transcripts and provide comprehensive evaluations. Return your response as valid JSON only, no additional text.\"\n}, {\n  \"role\": \"user\",\n  \"content\": \"Analyze this interview transcript for candidate: {{ $node['Extract Call Data'].json.callData.candidateName }}\\n\\nTranscript: {{ $node['Extract Call Data'].json.callData.transcript }}\\n\\nDuration: {{ Math.round($node['Extract Call Data'].json.callData.duration / 60000) }} minutes\\n\\nPlease analyze and return ONLY a JSON object with these exact fields:\\n{\\n  \\\"overallScore\\\": number (1-10),\\n  \\\"communicationSkillsScore\\\": number (1-10),\\n  \\\"enthusiasmScore\\\": number (1-10),\\n  \\\"professionalismScore\\\": number (1-10),\\n  \\\"keyStrengths\\\": [\\\"strength1\\\", \\\"strength2\\\"],\\n  \\\"areasForImprovement\\\": [\\\"area1\\\", \\\"area2\\\"],\\n  \\\"executiveSummary\\\": \\\"2-3 sentence summary\\\",\\n  \\\"recommendation\\\": \\\"Hire|Interview Further|Pass\\\",\\n  \\\"detailedFeedback\\\": \\\"detailed analysis\\\",\\n  \\\"redFlags\\\": [\\\"any concerning behaviors\\\"],\\n  \\\"standoutMoments\\\": [\\\"impressive responses or behaviors\\\"]\\n}\"\n}]"
            },
            {
              "name": "temperature",
              "value": 0.3
            },
            {
              "name": "max_tokens",
              "value": 1500
            }
          ]
        },
        "options": {}
      },
      "id": "c6b910c8-841f-456e-b1d0-7558378f6825",
      "name": "AI Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -432,
        80
      ],
      "credentials": {
        "openAiApi": {
          "id": "QtnX7K7CcLdLwtxh",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Calculate comprehensive statistics and combine all data\nconst callData = $node['Extract Call Data'].json.callData;\nconst aiResponse = $node['AI Analysis'].json;\n\n// Parse AI analysis (handle potential JSON parsing issues)\nlet aiAnalysis;\ntry {\n  if (typeof aiResponse.choices[0].message.content === 'string') {\n    aiAnalysis = JSON.parse(aiResponse.choices[0].message.content);\n  } else {\n    aiAnalysis = aiResponse.choices[0].message.content;\n  }\n} catch (error) {\n  console.error('Error parsing AI response:', error);\n  // Fallback analysis\n  aiAnalysis = {\n    overallScore: 5,\n    communicationSkillsScore: 5,\n    enthusiasmScore: 5,\n    professionalismScore: 5,\n    keyStrengths: ['Participated in interview'],\n    areasForImprovement: ['Analysis could not be completed'],\n    executiveSummary: 'Interview completed but detailed analysis unavailable.',\n    recommendation: 'Interview Further',\n    detailedFeedback: 'AI analysis failed - manual review required.',\n    redFlags: [],\n    standoutMoments: []\n  };\n}\n\n// Calculate detailed statistics\nconst transcript = callData.transcript || '';\nconst words = transcript.split(/\\s+/).filter(word => word.length > 0);\nconst sentences = transcript.split(/[.!?]+/).filter(s => s.trim().length > 0);\nconst durationMinutes = callData.duration > 0 ? callData.duration / 60000 : 0;\n\nconst statistics = {\n  callDurationMinutes: Math.round(durationMinutes * 100) / 100,\n  callDurationSeconds: Math.round(callData.duration / 1000),\n  wordCount: words.length,\n  sentenceCount: sentences.length,\n  averageWordsPerMinute: durationMinutes > 0 ? Math.round((words.length / durationMinutes) * 100) / 100 : 0,\n  averageWordsPerSentence: sentences.length > 0 ? Math.round((words.length / sentences.length) * 100) / 100 : 0,\n  callCompletionRate: callData.callStatus === 'completed' ? 100 : 0,\n  hasRecording: !!callData.recordingUrl,\n  transcriptLength: transcript.length,\n  estimatedCost: callData.cost || 0\n};\n\n// Calculate composite scores\nconst compositeScores = {\n  averageScore: Math.round(((aiAnalysis.overallScore + aiAnalysis.communicationSkillsScore + aiAnalysis.enthusiasmScore + aiAnalysis.professionalismScore) / 4) * 100) / 100,\n  skillsScore: Math.round(((aiAnalysis.communicationSkillsScore + aiAnalysis.professionalismScore) / 2) * 100) / 100,\n  personalityScore: Math.round(((aiAnalysis.enthusiasmScore + aiAnalysis.overallScore) / 2) * 100) / 100\n};\n\n// Determine hire probability based on scores\nlet hireProbability = 0;\nif (aiAnalysis.recommendation === 'Hire') hireProbability = 85;\nelse if (aiAnalysis.recommendation === 'Interview Further') hireProbability = 60;\nelse hireProbability = 25;\n\n// Add score-based adjustments\nif (compositeScores.averageScore >= 8) hireProbability += 10;\nelse if (compositeScores.averageScore <= 4) hireProbability -= 15;\n\nhireProbability = Math.max(0, Math.min(100, hireProbability));\n\n// Create comprehensive report data\nconst reportData = {\n  // Candidate Info\n  candidateName: callData.candidateName,\n  sessionId: callData.sessionId,\n  callId: callData.callId,\n  \n  // Call Details\n  startTime: callData.startTime,\n  endTime: callData.endTime,\n  callStatus: callData.callStatus,\n  phoneNumber: callData.phoneNumber,\n  \n  // AI Analysis Scores\n  overallScore: aiAnalysis.overallScore,\n  communicationScore: aiAnalysis.communicationSkillsScore,\n  enthusiasmScore: aiAnalysis.enthusiasmScore,\n  professionalismScore: aiAnalysis.professionalismScore,\n  \n  // Composite Scores\n  averageScore: compositeScores.averageScore,\n  skillsScore: compositeScores.skillsScore,\n  personalityScore: compositeScores.personalityScore,\n  hireProbability: hireProbability,\n  \n  // Qualitative Analysis\n  keyStrengths: aiAnalysis.keyStrengths || [],\n  areasForImprovement: aiAnalysis.areasForImprovement || [],\n  executiveSummary: aiAnalysis.executiveSummary || '',\n  recommendation: aiAnalysis.recommendation || 'Review Required',\n  detailedFeedback: aiAnalysis.detailedFeedback || '',\n  redFlags: aiAnalysis.redFlags || [],\n  standoutMoments: aiAnalysis.standoutMoments || [],\n  \n  // Statistics\n  ...statistics,\n  \n  // Technical Data\n  transcript: callData.transcript,\n  recordingUrl: callData.recordingUrl,\n  \n  // Metadata\n  generatedAt: new Date().toISOString(),\n  processedBy: 'n8n-workflow',\n  workflowVersion: '1.0'\n};\n\nreturn [{\n  json: {\n    reportData,\n    callData,\n    aiAnalysis,\n    statistics,\n    compositeScores\n  }\n}];"
      },
      "id": "56a90725-1be8-4022-ad36-df8e7cceef01",
      "name": "Calculate Statistics & Compile Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -208,
        80
      ]
    },
    {
      "parameters": {
        "authentication": "airtableOAuth2Api",
        "operation": "list",
        "application": {
          "__rl": true,
          "mode": "id",
          "value": ""
        },
        "table": {
          "__rl": true,
          "value": "Candidates",
          "mode": "list"
        },
        "additionalOptions": {}
      },
      "id": "45bd15c6-d6dd-4936-8ad9-b5302405e2ac",
      "name": "Lookup Candidate by Token",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [
        32,
        240
      ],
      "credentials": {
        "airtableOAuth2Api": {
          "id": "m3mu45U9vA2UAO33",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "airtableOAuth2Api",
        "operation": "={{$node['Lookup Candidate by Token'].json.records && $node['Lookup Candidate by Token'].json.records.length > 0 ? 'update' : 'create'}}",
        "application": {
          "__rl": true,
          "mode": "url",
          "value": ""
        },
        "table": {
          "__rl": true,
          "value": "Candidates",
          "mode": "list"
        },
        "id": "={{$node['Lookup Candidate by Token'].json.records && $node['Lookup Candidate by Token'].json.records.length > 0 ? $node['Lookup Candidate by Token'].json.records[0].id : undefined}}",
        "additionalOptions": {},
        "options": {}
      },
      "id": "725a5bcd-e890-4dca-88ee-170daecf49e6",
      "name": "Update Airtable",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [
        240,
        176
      ],
      "credentials": {
        "airtableOAuth2Api": {
          "id": "m3mu45U9vA2UAO33",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Generate comprehensive HTML report\nconst reportData = $node['Calculate Statistics & Compile Report'].json.reportData;\n\n// Helper function to get score color\nfunction getScoreColor(score) {\n  if (score >= 8) return '#10b981'; // Green\n  if (score >= 6) return '#f59e0b'; // Yellow\n  return '#ef4444'; // Red\n}\n\n// Helper function to get recommendation color\nfunction getRecommendationColor(recommendation) {\n  if (recommendation === 'Hire') return '#10b981';\n  if (recommendation === 'Interview Further') return '#f59e0b';\n  return '#ef4444';\n}\n\nconst htmlReport = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interview Report - ${reportData.candidateName}</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body { \n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; \n            line-height: 1.6; \n            color: #333; \n            background-color: #f8fafc;\n        }\n        .container { max-width: 900px; margin: 0 auto; padding: 20px; }\n        .header { \n            background: linear-gradient(135deg, #5dc399, #7be1b6); \n            color: white; \n            padding: 30px; \n            border-radius: 12px; \n            margin-bottom: 30px;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        }\n        .header h1 { font-size: 2.5em; margin-bottom: 10px; }\n        .header-info { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 20px; }\n        .header-item { background: rgba(255,255,255,0.2); padding: 10px; border-radius: 8px; }\n        .score-section { \n            background: white; \n            padding: 30px; \n            border-radius: 12px; \n            margin-bottom: 30px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        .score-grid { \n            display: grid; \n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); \n            gap: 20px; \n            margin: 20px 0; \n        }\n        .score-card { \n            background: #f8fafc; \n            padding: 20px; \n            border-radius: 12px; \n            text-align: center;\n            border: 2px solid #e2e8f0;\n            transition: transform 0.2s;\n        }\n        .score-card:hover { transform: translateY(-2px); }\n        .score { \n            font-size: 3em; \n            font-weight: bold; \n            margin-bottom: 5px;\n        }\n        .score-label { font-size: 0.9em; color: #64748b; font-weight: 500; }\n        .recommendation { \n            padding: 25px; \n            border-radius: 12px; \n            margin: 20px 0;\n            border-left: 6px solid;\n        }\n        .section { \n            background: white; \n            padding: 25px; \n            border-radius: 12px; \n            margin-bottom: 20px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        .section h3 { \n            color: #065f46; \n            margin-bottom: 15px; \n            font-size: 1.3em;\n            border-bottom: 2px solid #e2e8f0;\n            padding-bottom: 10px;\n        }\n        .two-column { \n            display: grid; \n            grid-template-columns: 1fr 1fr; \n            gap: 30px; \n        }\n        .stat-item { \n            display: flex; \n            justify-content: space-between; \n            padding: 8px 0; \n            border-bottom: 1px solid #f1f5f9;\n        }\n        .stat-label { font-weight: 500; color: #64748b; }\n        .stat-value { font-weight: bold; color: #1e293b; }\n        ul { list-style: none; }\n        li { \n            padding: 8px 0; \n            padding-left: 20px;\n            position: relative;\n        }\n        li:before { \n            content: '•'; \n            color: #5dc399; \n            font-weight: bold; \n            position: absolute; \n            left: 0;\n            font-size: 1.2em;\n        }\n        .highlight { background: #fef3c7; padding: 15px; border-radius: 8px; margin: 10px 0; }\n        .footer { \n            text-align: center; \n            color: #64748b; \n            margin-top: 30px; \n            padding: 20px;\n            border-top: 2px solid #e2e8f0;\n        }\n        @media (max-width: 768px) {\n            .two-column { grid-template-columns: 1fr; }\n            .score-grid { grid-template-columns: repeat(2, 1fr); }\n            .header h1 { font-size: 2em; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <!-- Header -->\n        <div class=\"header\">\n            <h1>🌸 Bloom Buddies Interview Report</h1>\n            <div class=\"header-info\">\n                <div class=\"header-item\">\n                    <strong>Candidate:</strong><br>${reportData.candidateName}\n                </div>\n                <div class=\"header-item\">\n                    <strong>Date:</strong><br>${new Date(reportData.startTime).toLocaleDateString('en-US', { \n                        year: 'numeric', month: 'long', day: 'numeric' \n                    })}\n                </div>\n                <div class=\"header-item\">\n                    <strong>Duration:</strong><br>${reportData.callDurationMinutes} minutes\n                </div>\n                <div class=\"header-item\">\n                    <strong>Session ID:</strong><br>${reportData.sessionId || 'N/A'}\n                </div>\n            </div>\n        </div>\n\n        <!-- Scores Section -->\n        <div class=\"score-section\">\n            <h2>📊 Interview Scores</h2>\n            <div class=\"score-grid\">\n                <div class=\"score-card\">\n                    <div class=\"score\" style=\"color: ${getScoreColor(reportData.overallScore)}\">${reportData.overallScore}/10</div>\n                    <div class=\"score-label\">Overall Score</div>\n                </div>\n                <div class=\"score-card\">\n                    <div class=\"score\" style=\"color: ${getScoreColor(reportData.communicationScore)}\">${reportData.communicationScore}/10</div>\n                    <div class=\"score-label\">Communication</div>\n                </div>\n                <div class=\"score-card\">\n                    <div class=\"score\" style=\"color: ${getScoreColor(reportData.enthusiasmScore)}\">${reportData.enthusiasmScore}/10</div>\n                    <div class=\"score-label\">Enthusiasm</div>\n                </div>\n                <div class=\"score-card\">\n                    <div class=\"score\" style=\"color: ${getScoreColor(reportData.professionalismScore)}\">${reportData.professionalismScore}/10</div>\n                    <div class=\"score-label\">Professionalism</div>\n                </div>\n                <div class=\"score-card\">\n                    <div class=\"score\" style=\"color: ${getScoreColor(reportData.averageScore)}\">${reportData.averageScore}/10</div>\n                    <div class=\"score-label\">Average Score</div>\n                </div>\n                <div class=\"score-card\">\n                    <div class=\"score\" style=\"color: ${getScoreColor(reportData.hireProbability/10)}\">${reportData.hireProbability}%</div>\n                    <div class=\"score-label\">Hire Probability</div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Recommendation -->\n        <div class=\"recommendation\" style=\"\n            background-color: ${getRecommendationColor(reportData.recommendation)}15;\n            border-left-color: ${getRecommendationColor(reportData.recommendation)};\n        \">\n            <h3 style=\"color: ${getRecommendationColor(reportData.recommendation)}; margin-bottom: 10px;\">\n                🎯 Recommendation: ${reportData.recommendation}\n            </h3>\n            <p style=\"font-size: 1.1em; margin-bottom: 15px;\">${reportData.executiveSummary}</p>\n            ${reportData.detailedFeedback ? `<div class=\"highlight\"><strong>Detailed Feedback:</strong> ${reportData.detailedFeedback}</div>` : ''}\n        </div>\n\n        <!-- Two Column Layout -->\n        <div class=\"two-column\">\n            <!-- Strengths -->\n            <div class=\"section\">\n                <h3>💪 Key Strengths</h3>\n                <ul>\n                    ${reportData.keyStrengths.map(strength => `<li>${strength}</li>`).join('')}\n                </ul>\n                ${reportData.standoutMoments && reportData.standoutMoments.length > 0 ? `\n                    <h4 style=\"margin-top: 20px; color: #065f46;\">⭐ Standout Moments</h4>\n                    <ul>\n                        ${reportData.standoutMoments.map(moment => `<li>${moment}</li>`).join('')}\n                    </ul>\n                ` : ''}\n            </div>\n\n            <!-- Areas for Improvement -->\n            <div class=\"section\">\n                <h3>📈 Areas for Improvement</h3>\n                <ul>\n                    ${reportData.areasForImprovement.map(area => `<li>${area}</li>`).join('')}\n                </ul>\n                ${reportData.redFlags && reportData.redFlags.length > 0 ? `\n                    <h4 style=\"margin-top: 20px; color: #dc2626;\">🚩 Areas of Concern</h4>\n                    <ul>\n                        ${reportData.redFlags.map(flag => `<li style=\"color: #dc2626;\">${flag}</li>`).join('')}\n                    </ul>\n                ` : ''}\n            </div>\n        </div>\n\n        <!-- Call Statistics -->\n        <div class=\"section\">\n            <h3>📞 Call Statistics</h3>\n            <div class=\"two-column\">\n                <div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Call Duration:</span>\n                        <span class=\"stat-value\">${reportData.callDurationMinutes} minutes</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Word Count:</span>\n                        <span class=\"stat-value\">${reportData.wordCount.toLocaleString()} words</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Speaking Rate:</span>\n                        <span class=\"stat-value\">${reportData.averageWordsPerMinute} WPM</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Sentence Count:</span>\n                        <span class=\"stat-value\">${reportData.sentenceCount}</span>\n                    </div>\n                </div>\n                <div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Call Status:</span>\n                        <span class=\"stat-value\">${reportData.callStatus}</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Recording Available:</span>\n                        <span class=\"stat-value\">${reportData.hasRecording ? 'Yes' : 'No'}</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Avg Words/Sentence:</span>\n                        <span class=\"stat-value\">${reportData.averageWordsPerSentence}</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Estimated Cost:</span>\n                        <span class=\"stat-value\">$${reportData.estimatedCost.toFixed(2)}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Technical Details -->\n        <div class=\"section\">\n            <h3>🔧 Technical Details</h3>\n            <div class=\"stat-item\">\n                <span class=\"stat-label\">Call ID:</span>\n                <span class=\"stat-value\">${reportData.callId || 'N/A'}</span>\n            </div>\n            <div class=\"stat-item\">\n                <span class=\"stat-label\">Phone Number:</span>\n                <span class=\"stat-value\">${reportData.phoneNumber || 'N/A'}</span>\n            </div>\n            <div class=\"stat-item\">\n                <span class=\"stat-label\">Processed At:</span>\n                <span class=\"stat-value\">${new Date(reportData.generatedAt).toLocaleString()}</span>\n            </div>\n            ${reportData.recordingUrl ? `\n                <div class=\"stat-item\">\n                    <span class=\"stat-label\">Recording:</span>\n                    <span class=\"stat-value\"><a href=\"${reportData.recordingUrl}\" target=\"_blank\">Listen to Recording</a></span>\n                </div>\n            ` : ''}\n        </div>\n\n        <!-- Footer -->\n        <div class=\"footer\">\n            <p>Report generated by Bloom Buddies AI Interview System</p>\n            <p>Workflow Version: ${reportData.workflowVersion} | Generated: ${new Date(reportData.generatedAt).toLocaleString()}</p>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\nreturn [{ json: { htmlReport } }];"
      },
      "id": "42875495-9df1-43b2-b7e8-d55480227957",
      "name": "Generate HTML Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        16,
        -16
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\\n  \\\"status\\\": \\\"success\\\",\\n  \\\"message\\\": \\\"Interview processed and candidate record updated\\\",\\n  \\\"candidateName\\\": \\\"{{ $node['Calculate Statistics & Compile Report'].json.reportData.candidateName }}\\\",\\n  \\\"overallScore\\\": {{ $node['Calculate Statistics & Compile Report'].json.reportData.overallScore }},\\n  \\\"recommendation\\\": \\\"{{ $node['Calculate Statistics & Compile Report'].json.reportData.recommendation }}\\\",\\n  \\\"sessionId\\\": \\\"{{ $node['Calculate Statistics & Compile Report'].json.reportData.sessionId }}\\\",\\n  \\\"sessionToken\\\": \\\"{{ $node['Calculate Statistics & Compile Report'].json.reportData.sessionToken }}\\\",\\n  \\\"existingCandidate\\\": {{$node['Lookup Candidate by Token'].json.records && $node['Lookup Candidate by Token'].json.records.length > 0 ? true : false}},\\n  \\\"recordOperation\\\": \\\"{{$node['Lookup Candidate by Token'].json.records && $node['Lookup Candidate by Token'].json.records.length > 0 ? 'updated' : 'created'}}\\\",\\n  \\\"processedAt\\\": \\\"{{ $node['Calculate Statistics & Compile Report'].json.reportData.generatedAt }}\\\"\\n}",
        "options": {}
      },
      "id": "c0ba5df9-b576-4582-8119-534afd294ba9",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        464,
        80
      ]
    },
    {
      "parameters": {
        "sendTo": "hugh@xenergies.com",
        "subject": "=🌸 Interview Report: {{ $node['Calculate Statistics & Compile Report'].json.reportData.candidateName }} - {{ $node['Calculate Statistics & Compile Report'].json.reportData.recommendation }} ({{ $node['Calculate Statistics & Compile Report'].json.reportData.averageScore }}/10)",
        "message": "={{ $node['Generate HTML Report'].json.htmlReport }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        240,
        -16
      ],
      "id": "ab774b65-1d80-4566-a65c-6d792fe16f8c",
      "name": "Send a message",
      "webhookId": "fd28c649-9dea-48cd-8e55-3ecf89c9f32d",
      "credentials": {
        "gmailOAuth2": {
          "id": "n41dhFfXLmdPZBkT",
          "name": "Gmail account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "VAPI Call Completed Webhook": {
      "main": [
        [
          {
            "node": "Debug VAPI Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug VAPI Webhook Data": {
      "main": [
        [
          {
            "node": "Extract Call Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Call Data": {
      "main": [
        [
          {
            "node": "AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analysis": {
      "main": [
        [
          {
            "node": "Calculate Statistics & Compile Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Statistics & Compile Report": {
      "main": [
        [
          {
            "node": "Lookup Candidate by Token",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate HTML Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup Candidate by Token": {
      "main": [
        [
          {
            "node": "Update Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Airtable": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate HTML Report": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "53dd5267-92a5-4633-9b83-13abcf7aeaa6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f0340714a889de34029a918512ab69ac03a5f9c338fbfae0e656eee3e31467d1"
  },
  "id": "AiTAKChd7U5OC93A",
  "tags": []
}